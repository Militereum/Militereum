unit exploit;

interface

uses
  // Delphi
  System.Classes, System.SysUtils,
  // FireMonkey
  FMX.Controls, FMX.Controls.Presentation, FMX.Objects, FMX.StdCtrls, FMX.Types,
  // web3
  web3,
  // project
  base, transaction;

type
  TFrmExploit = class(TFrmBase)
    lblTitle: TLabel;
    lblAddress: TLabel;
    lblDescription: TLabel;
    procedure lblAddressClick(Sender: TObject);
  strict private
    FURL: string;
    procedure SetSpender(const value: TAddress);
    procedure SetExploit(const value: string);
  public
    property Spender: TAddress write SetSpender;
    property Exploit: string write SetExploit;
    property URL: string write FURL;
  end;

procedure show(
  const chain   : TChain;
  const tx      : transaction.ITransaction;
  const spender : TAddress;
  const exploit : string;
  const URL     : string;
  const callback: TProc<Boolean>; const log: TLog);

implementation

uses
  // project
  cache, common, thread;

{$R *.fmx}

procedure show(const chain: TChain; const tx: transaction.ITransaction; const spender: TAddress; const exploit, URL: string; const callback: TProc<Boolean>; const log: TLog);
begin
  const frmExploit = TFrmExploit.Create(chain, tx, callback, log);
  frmExploit.Spender := spender;
  frmExploit.Exploit := exploit;
  frmExploit.URL     := URL;
  frmExploit.Show;
end;

{ TFrmExploit }

procedure TFrmExploit.SetSpender(const value: TAddress);
begin
  lblAddress.Text := string(value);
  cache.getFriendlyName(Self.Chain, value, procedure(friendly: string; err: IError)
  begin
    if Assigned(err) then Self.Log(err) else thread.synchronize(procedure
    begin
      lblAddress.Text := friendly;
    end);
  end);
end;

procedure TFrmExploit.SetExploit(const value: string);
begin
  lblTitle.Text := value;
end;

procedure TFrmExploit.lblAddressClick(Sender: TObject);
begin
  common.Open(FURL);
end;

end.
